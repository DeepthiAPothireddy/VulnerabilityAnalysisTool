import urllib2, urllib, cookielib
from bs4 import BeautifulSoup
import requests
from urlparse import urljoin
import argparse
from collections import OrderedDict
from distutils.tests.setuptools_build_ext import if_dl
import re
import sys
import random
            
SUCCESSFUL_XSS = {}

def crawl_for_xss(url_postrequest,form_field_dict,randomstring,xss_file,cookie_dict):
    new_cookie = []
    temp_form_field = form_field_dict.copy()
    for i in range(len(form_field_dict)):
        form_field_dict = temp_form_field.copy()
        form_field_dict[form_field_dict.keys()[i]] = randomstring 
        if cookie_dict:                              
            response = requests.post(url_postrequest,form_field_dict,verify=False,cookies=cookie_dict)
        else:
            response = requests.post(url_postrequest,form_field_dict,verify=False)
        page_content = response.text
        if randomstring in page_content:
            with open(xss_file,'r') as file_input:
                with open(xss_file, 'a') as file_output:
                    file_output.write(url_postrequest)
                    for key,value in form_field_dict.iteritems():
                        formfield = ''.join(value)
                        file_output.write(','+key+',' + formfield +',')
                    file_output.write('\n')
            value = True
            truekey = form_field_dict.keys()[i]
        else : 
            value = False
            truekey = form_field_dict.keys()[i]
    return value,truekey

def attack_xss(location,url_postrequest,form_field_dict,randomstring,xss_file,cookie_dict=False):
    if cookie_dict:
        check_for_psbl_xss, field_With_vulnerability = crawl_for_xss(url_postrequest, form_field_dict, randomstring, xss_file, cookie_dict)
    else:
        check_for_psbl_xss, field_With_vulnerability = crawl_for_xss(url_postrequest, form_field_dict, randomstring, xss_file)
    if(check_for_psbl_xss):
        xss_payloads = location + "/xssPayloads.txt"
        xss_true = location + "/xsstrue.txt"
        temp_form_field = form_field_dict.copy()
        with open(xss_payloads,'r') as file_xss:
            for line in file_xss:
                form_field_dict = temp_form_field.copy()
                form_field_dict[field_With_vulnerability] = line
                print(form_field_dict)
                if cookie_dict:
                    responsexss = requests.post(url_postrequest,form_field_dict,verify=False,cookies=cookie_dict)
                else:
                    responsexss = requests.post(url_postrequest,form_field_dict,verify=False)
                page_contentxss = responsexss.text
                print(page_contentxss)
                if line in page_contentxss:
                    with open(xss_true,'r') as file_input:
                        if not url_postrequest in file_input.readlines():
                            with open(xss_true, 'a') as file_output:
                                file_output.write(url_postrequest)
                                for key,value in form_field_dict.iteritems():
                                    formfield = ''.join(value)
                                    file_output.write(','+key+',' + formfield +',')
                                file_output.write('\n')
                    continue
    
def check_ifxsspsbl(login_url,postrequest_file,postrequesttype_file,location,cookie=False):
    xss_file = location+'/xss_urls.txt'
    random_stringpayloads = location+'/payloads_randomstring.txt'
    name_payloads = location+'/postrequestname.txt'
    with open(xss_file, "w"):
        pass
    with open(random_stringpayloads) as ranstringpayloadsobject:
        randomstringpayload = ranstringpayloadsobject.readlines()
    form_field_dict = OrderedDict()
    randomstring = "FLGSNIPPERR"
    postrequest_fileobject = open(postrequest_file)
    postrequest_filetype = open(postrequesttype_file).readlines()
    postrequest_filename = open(name_payloads).readlines()
    for line in postrequest_fileobject:
        required_line = line.split(',')
        url_postrequest = required_line[0]
        for i in range(len(required_line[1:-1])):
            if not required_line[i+1] =='':
                form_field_dict[required_line[i+1]] = []
        for i in range(len(required_line[1:-1])):
            for linetype in postrequest_filetype:
                if url_postrequest in linetype:
                    required_linetype = linetype.split(',')
                    if not required_line[i+1] =='':
                        if required_line[i+1] in required_linetype:
                            j = required_linetype.index(required_line[i+1])
                            if "text" in required_linetype[j+1]:
                                for linename in postrequest_filename:
                                    if required_line[i+1] in linename:
                                        linename_list = linename.split(':')
                                        if not required_line[i+1] =='':
                                            form_field_dict[required_line[i+1]] = linename_list[0]
                            else:
                                for loadline in randomstringpayload:
                                    if len(required_linetype)>j+1:
                                        if required_linetype[j+1] in loadline:
                                            loadlinelist = loadline.split(',')
                                            form_field_dict[required_line[i+1]] = loadlinelist[1].rstrip('\n')
                        if not form_field_dict[required_line[i+1]]:
                            print(url_postrequest)
                            print("form field name: " + required_line[i+1])
                            form_field_dict[required_line[i+1]] = raw_input("Enter value for the field")
                            with open(name_payloads, 'a') as file_output:
                                file_output.write(form_field_dict[required_line[i+1]] + ':' + required_line[i+1]+'\n')
            #form_field_dict = OrderedDict((el,line) for el in required_line[1:-1])
        if not login_url in url_postrequest:
            if cookie:
                attack_xss(location,url_postrequest,form_field_dict,randomstring,xss_file,cookie)
            else:
                attack_xss(location, url_postrequest, form_field_dict, randomstring, xss_file)
        else:
            continue

